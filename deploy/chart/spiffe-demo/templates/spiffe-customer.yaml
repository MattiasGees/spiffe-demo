apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ include "spiffeDemo.name" . }}-customer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "spiffeDemo.name" . }}-customer
  labels:
    app: spiffe-customer
spec:
  selector:
    matchLabels:
      app: spiffe-customer
  template:
    metadata:
      labels:
        app: spiffe-customer
    spec:
      serviceAccountName: {{ include "spiffeDemo.name" . }}-customer
      initContainers:
        - name: init-container
          image:  "{{- .Values.initContainer.imageName -}}:{{- .Values.initContainer.imageTag -}}"
          imagePullPolicy: Always
          volumeMounts:
            - name: aws-config
              mountPath: /tmp/aws
          env:
          - name: AWS_ROLE_ARN
            value: "{{- .Values.initContainer.awsRoleArn -}}"
          - name: AWS_TRUST_ANCHOR_ARN
            value: "{{- .Values.initContainer.awsTrustAnchorArn -}}"
          - name: AWS_PROFILE_ARN
            value: "{{- .Values.initContainer.awsProfileArn -}}"
          - name: AWS_AUTH
            value: "{{- .Values.initContainer.awsAuth -}}"
          - name: JWT_AUDIENCE
            value: "{{- .Values.initContainer.JWTAudience -}}"
          - name: SPIFFE_ENDPOINT_SOCKET
            value: "unix://{{- .Values.spiffe.socketPath -}}"
      containers:
        - name: spiffe-customer
          image: "{{- .Values.spiffeApp.imageName -}}:{{- .Values.spiffeApp.imageTag -}}"
          imagePullPolicy: Always
          volumeMounts:
            - name: spiffe-workload-api
              mountPath: /spiffe-workload-api
              readOnly: true
            - name: aws-config
              mountPath: /tmp/aws
          args:
          - customer
          - --authorized-spiffe
          - "spiffe://{{- .Values.spiffe.trustdomain -}}/ns/{{- .Release.Namespace -}}/sa/{{- include "spiffeDemo.name" . -}}-backend"
          - --server-address
          - 0.0.0.0:8080
          - --backend-service
          - https://{{ include "spiffeDemo.name" . }}-backend.{{ .Release.Namespace -}}.svc.cluster.local
          - --aws-region
          - "{{- .Values.spiffeCustomer.awsRegion -}}"
          - --s3-bucket
          - "{{- .Values.spiffeCustomer.s3Bucket -}}"
          - --authorized-spiffe-httpbackend
          - "spiffe://{{- .Values.spiffe.trustdomain -}}/ns/{{- .Release.Namespace -}}/sa/{{- include "spiffeDemo.name" . -}}-httpbackend"
          - --httpbackend-service
          - https://{{ include "spiffeDemo.name" . }}-httpbackend.{{ .Release.Namespace -}}.svc.cluster.local
          - --postgresql-host
          - {{ include "spiffeDemo.name" . }}-postgresql.{{ .Release.Namespace -}}.svc.cluster.local
          - --postgresql-user
          - {{ include "spiffeDemo.name" . }}-customer
          env:
          - name: AWS_CONFIG_FILE
            value: "/tmp/aws/config"
          - name: AWS_SDK_LOAD_CONFIG
            value: "1"
          - name: SPIFFE_ENDPOINT_SOCKET
            value: "unix://{{- .Values.spiffe.socketPath -}}"
          - name: SPIFFE_GCP_PROXY_URL
            value: http://localhost:8081
          - name: BUCKET_NAME
            value: "{{- .Values.spiffeCustomer.gcpBucket -}}"
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
        - name: gcp-proxy
          image: "{{- .Values.spiffeGcpProxy.imageName -}}:{{- .Values.spiffeGcpProxy.imageTag -}}"
          ports:
            - containerPort: 8081
          volumeMounts:
            - name: spiffe-workload-api
              mountPath: /spiffe-workload-api
              readOnly: true
          env:
            - name: SPIFFE_AGENT_SOCKET_PATH
              value: "unix://{{- .Values.spiffe.socketPath -}}"
            - name: SERVICE_ACCOUNT
              value: spire-storage-writer@{{- .Values.spiffeGcpProxy.gcpProjectName -}}.iam.gserviceaccount.com
            - name: PROJECT_NAME
              value: "{{- .Values.spiffeGcpProxy.gcpProjectName -}}"
            - name: PROJECT_NUMBER
              value: "{{- .Values.spiffeGcpProxy.gcpProjectNumber -}}"
            - name: PROVIDER_ID
              value: spire-oidc-provider
            - name: POOL_ID
              value: spire-workload-pool
          args:
            - -bind=:8081
            - -spiffe_agent_socket_path=$(SPIFFE_AGENT_SOCKET_PATH)
            - -service_account=$(SERVICE_ACCOUNT)
            - -projectId=$(PROJECT_NAME)
            - -projectNumber=$(PROJECT_NUMBER)
            - -providerId=$(PROVIDER_ID)
            - -poolId=$(POOL_ID)
      volumes:
      - csi:
          driver: csi.spiffe.io
          readOnly: true
        name: spiffe-workload-api
      - name: aws-config
        emptyDir:
          medium: Memory
---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "spiffeDemo.name" . }}-customer
spec:
  selector:
    app: spiffe-customer
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    {{- with .Values.spiffeCustomer.annotations }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  name: {{ include "spiffeDemo.name" . }}-customer
spec:
  {{- if .Values.spiffeCustomer.ingressClassName }}
  ingressClassName: {{ .Values.spiffeCustomer.ingressClassName | quote }}
  {{- end }}
  rules:
  - host: {{ .Values.spiffeCustomer.hostname }}
    http:
      paths:
      - backend:
          service:
            name: {{ include "spiffeDemo.name" . }}-customer
            port:
              number: 80
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - {{ .Values.spiffeCustomer.hostname }}
    secretName: {{ include "spiffeDemo.name" . }}-demo
